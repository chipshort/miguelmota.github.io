<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ssh on My New Hugo Site</title>
    <link>http://example.org/tags/ssh/</link>
    <description>Recent content in Ssh on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deployment with Git</title>
      <link>http://example.org/blog/deployment-with-git/</link>
      <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/deployment-with-git/</guid>
      <description>A Git hook allows you to execute custom scripts when an action occurs, such as when a commit or push is performed. Before I discovered git hooks, my deployment process consisted of pushing changes to my remote repository, SSH&amp;rsquo;ing into the server, navigating to the site directory, pulling the changes, and restarting the webserver. It wasn&amp;rsquo;t efficient at all and a waste of time doing that several times a day.</description>
    </item>
    
    <item>
      <title>Set up SSH keys</title>
      <link>http://example.org/blog/set-up-ssh-keys/</link>
      <pubDate>Mon, 30 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/set-up-ssh-keys/</guid>
      <description>Having to type in a password in order to SSH into your server every single time is tedious and not the way to go. I will show you how to set up SSH keys so that you can elimate an extra step from your workflow.
Generating keys On your local maching, generate a new SSH key with the command:
# Generate new key. ssh-keygen -t rsa  When asked for the file to save the key in, enter:</description>
    </item>
    
  </channel>
</rss>