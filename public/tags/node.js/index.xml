<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on My New Hugo Site</title>
    <link>http://example.org/tags/node.js/</link>
    <description>Recent content in Node.js on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Dec 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to convert a Buffer to ArrayBuffer</title>
      <link>http://example.org/bytes/buffer-to-arraybuffer/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/buffer-to-arraybuffer/</guid>
      <description>Convert a Buffer to ArrayBuffer.
var isArrayBufferSupported = (new Buffer(0)).buffer instanceof ArrayBuffer; var bufferToArrayBuffer = isArrayBufferSupported ? bufferToArrayBufferSlice : bufferToArrayBufferCycle; function bufferToArrayBufferSlice(buffer) { return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength); } function bufferToArrayBufferCycle(buffer) { var ab = new ArrayBuffer(buffer.length); var view = new Uint8Array(ab); for (var i = 0; i &amp;lt; buffer.length; ++i) { view[i] = buffer[i]; } return ab; }  Usage
var b = new Buffer(12); b.write(&#39;abc&#39;, 0); var ab = bufferToArrayBuffer(b); String.</description>
    </item>
    
    <item>
      <title>How to convert an ArrayBuffer to Buffer</title>
      <link>http://example.org/bytes/arraybuffer-to-buffer/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/arraybuffer-to-buffer/</guid>
      <description>Convert an ArrayBuffer to Buffer.
var isArrayBufferSupported = (new Buffer(new Uint8Array([1]).buffer)[0] === 1); var arrayBufferToBuffer = isArrayBufferSupported ? arrayBufferToBufferAsArgument : arrayBufferToBufferCycle; function arrayBufferToBufferAsArgument(ab) { return new Buffer(ab); } function arrayBufferToBufferCycle(ab) { var buffer = new Buffer(ab.byteLength); var view = new Uint8Array(ab); for (var i = 0; i &amp;lt; buffer.length; ++i) { buffer[i] = view[i]; } return buffer; }  Usage
var ab = new ArrayBuffer(12); var v = new DataView(ab); [].</description>
    </item>
    
    <item>
      <title>How to open a Terminal tab programatically</title>
      <link>http://example.org/bytes/open-terminal-tab-programatically/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/open-terminal-tab-programatically/</guid>
      <description>Open a Terminal tab programatically in Node.js.
index.js:
var exec = require(&#39;child_process&#39;).exec; var through = require(&#39;through&#39;); var os = require(&#39;os&#39;); var child; var args = process.argv; function openTab(cmd, cb) { if (os.platform() !== &#39;darwin&#39;) { throw new Error(&#39;No support for this operating system but feel free to fork the repo and add it :)&#39;); } var open = [&#39;osascript -e \&#39;tell application &amp;quot;Terminal&amp;quot; to activate\&#39; &#39;, &#39;-e \&#39;tell application &amp;quot;System Events&amp;quot; to tell process &amp;quot;Terminal&amp;quot; to keystroke &amp;quot;t&amp;quot;&#39;, &#39;using command down\&#39; &#39;, &#39;-e \&#39;tell application &amp;quot;Terminal&amp;quot; to do script&#39;, &#39;&amp;quot;&#39;, cmd, &#39;&amp;quot;&#39;, &#39;in selected tab of the front window\&#39;&#39;].</description>
    </item>
    
    <item>
      <title>Node.js and Nginx on Ubuntu</title>
      <link>http://example.org/blog/nodejs-and-nginx-on-ubuntu/</link>
      <pubDate>Thu, 26 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/nodejs-and-nginx-on-ubuntu/</guid>
      <description>In this tutorial I will show how to install and configure Node.js and Nginx on you Ubuntu server.
Installing Dependencies The only dependency we really need is the build-essential package in order to be able to compile the Node.js source code.
# Make sure to download the latest repos. sudo apt-get update # Required to run `make` command. sudo apt-get install build-essential # If you need to use https. sudo apt-get install libssl-dev # My favorite text editor.</description>
    </item>
    
    <item>
      <title>Generate Self-signed SSL Certificate</title>
      <link>http://example.org/blog/generate-self-signed-ssl-certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/generate-self-signed-ssl-certificate/</guid>
      <description>Using HTTPS for your web application is a no-brainer, but sometimes it is not intuitively clear on how to get started on using SSL for your website. I&amp;rsquo;m going to be going over step-by-step on generating a self-signed certficate and testing it out on a Node.js web server.
Generating Private Key First let&amp;rsquo;s generate a private key. The private key is used to decrypt the data encrypted by the public key.</description>
    </item>
    
  </channel>
</rss>