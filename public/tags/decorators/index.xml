<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Decorators on My New Hugo Site</title>
    <link>http://example.org/tags/decorators/</link>
    <description>Recent content in Decorators on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Mar 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/decorators/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exploring Decorators in JavaScript</title>
      <link>http://example.org/blog/exploring-decorators-in-javascript/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/exploring-decorators-in-javascript/</guid>
      <description>In Object Oriented Programming, The Decorator Pattern is a popular design pattern that allows behavior to be added, removed, or modified from an object dynamically at runtime. In the latest iteration of the ES2016/ES7 specification, there is a proposal for JavaScript Decorators which lets us annotate and modify classes and properties at design time. I will be going over examples of decorators and how we can start using decorators in our code today.</description>
    </item>
    
  </channel>
</rss>