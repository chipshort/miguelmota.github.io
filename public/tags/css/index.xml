<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on My New Hugo Site</title>
    <link>http://example.org/tags/css/</link>
    <description>Recent content in Css on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Oct 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/css/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sass Cheatsheet</title>
      <link>http://example.org/bytes/sass-cheatsheet/</link>
      <pubDate>Wed, 01 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/sass-cheatsheet/</guid>
      <description>A Sass cheatsheet.
Watching sass --watch sass:css  source
Comments // I will not show when compiled /* I will be shown when compiled */  source
Imports @import &#39;foo&#39;;  source
Variables $foo: #000 !default; $bar: baz qux quux corge;  source
Nesting Selector nesting
.foo { .bar { // .foo .bar { } } }  source
Property nesting
.foo { text: { align: center; // .foo { text-align: center; } } }  source</description>
    </item>
    
    <item>
      <title>Sass Triangles</title>
      <link>http://example.org/blog/sass-triangles/</link>
      <pubDate>Sat, 04 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/sass-triangles/</guid>
      <description>Creating CSS triangles shouldn&amp;rsquo;t be hard.
Here&amp;rsquo;s a handy little mixin for creating triangles in Sass (gist):
@mixin triangle($size:24px, $color:#000, $direction:up, $trim:false, $transparent:false) { content: &amp;quot;&amp;quot;; display: inline-block; width: 0; height: 0; border: solid $size; @if $direction == up { border-color: transparent transparent $color transparent; @if $transparent { border-color: $color $color transparent $color; } @if $trim { border-top-width: 0; } } @if $direction == right { border-color: transparent transparent transparent $color; @if $transparent { border-color: $color $color $color transparent ; } @if $trim { border-right-width: 0; } } @if $direction == down { border-color: $color transparent transparent transparent; @if $transparent { border-color: transparent $color $color $color; } @if $trim { border-bottom-width: 0; } } @if $direction == left { border-color: transparent $color transparent transparent; @if $transparent { border-color: $color transparent $color $color; } @if $trim { border-left-width: 0; } } }  </description>
    </item>
    
    <item>
      <title>How to convert pixels to em in Sass</title>
      <link>http://example.org/bytes/sass-px-to-em/</link>
      <pubDate>Sat, 06 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/sass-px-to-em/</guid>
      <description>Sass function to convert pixels to em.
$em-base: 16px !default; @function emCalc($pxWidth) { @return $pxWidth / $em-base * 1em; }  Usage:
body { color: emCalc(20px); }  Compiles to:
body { color: 1.25em; }  </description>
    </item>
    
    <item>
      <title>Sass Media Queries</title>
      <link>http://example.org/blog/sass-media-queries/</link>
      <pubDate>Sat, 06 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/sass-media-queries/</guid>
      <description>There are various methods of setting breakpoints in Sass. The first method, which I use, is heavility inspired by Chris Eppstein&amp;rsquo;s selector hacks. The second method is how ZURB&amp;rsquo;s Foundation 4 breakpoints are set.
Here is the gist:
// Sass Media Query Breakpoints // // METHOD 1 // // Inspired by http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32 // // Usage: // // div { // color: blue; // // @include respond-to(mobile) { // color: red; // } // // } // $break-mobile: 640px; $break-desktop: 1024px; @mixin respond-to($media) { @if $media == mobile { @media only screen and (max-width: $break-mobile) { @content; } } @else if $media == tablet { @media only screen and (min-width: $break-mobile + 1) and (max-width: $break-desktop - 1) { @content; } } @else if $media == desktop { @media only screen and (min-width: $break-desktop) { @content; } } } // // METHOD 1 (extended) // // Inspired by https://gist.</description>
    </item>
    
    <item>
      <title>HTML5 Reset Stylesheet</title>
      <link>http://example.org/blog/html5-reset-stylesheet/</link>
      <pubDate>Tue, 09 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/html5-reset-stylesheet/</guid>
      <description>I couldn&amp;rsquo;t find an HTML5 reset stylesheet that suited my needs so I decided to modify HTML5 Doctors&amp;rsquo; CSS reset a bit.
Here is the gist:
html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, figcaption, figure, footer, header, hgroup, menu, nav, section, summary, time, mark, audio, video { background: transparent; border: 0; font-size: 100%; margin: 0; outline: 0; padding: 0; vertical-align: baseline; } body { line-height: 1; } article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; } ol, ul { list-style: none; } h1, h2, h3, h4, h5, h6 { font-size: 100%; font-weight: normal; } blockquote, q { quotes: none; } blockquote:before, blockquote:after, q:before, q:after { content: &#39;&#39;; content: none; } :focus { outline: 0; } a { text-decoration: none; } ins { text-decoration: none; } mark { font-style: italic; font-weight: bold; } del { text-decoration: line-through; } abbr[title], dfn[title] { border-bottom: 1px dotted; cursor: help; } table { border-collapse: collapse; border-spacing: 0; } caption, th, td { font-weight: normal; text-align: left; } hr { border: 0; border-top: 1px solid #ccc; display: block; height: 1px; margin: 1em 0; padding: 0; } input, select { vertical-align: middle; }  What CSS reset do you use?</description>
    </item>
    
  </channel>
</rss>