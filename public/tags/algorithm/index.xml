<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on My New Hugo Site</title>
    <link>http://example.org/tags/algorithm/</link>
    <description>Recent content in Algorithm on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Oct 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to calculate the square root using Babylonian method.</title>
      <link>http://example.org/bytes/babylonian-method/</link>
      <pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/babylonian-method/</guid>
      <description>Babylonian method for calculating square root of a number.
function sqrt(n) { if (!(typeof n === &#39;number&#39; &amp;amp;&amp;amp; n &amp;gt;= 0 &amp;amp;&amp;amp; !isNaN(n))) { return NaN; } else if (n === 0) { return 0; } else if (n === Infinity) { return Infinity; } var val = n; while(true) { var last = val; val = (val + n / val) * 0.5; if (Math.abs(val - last) &amp;lt; 1e-9) { break; } } return val; }  Usage:</description>
    </item>
    
    <item>
      <title>How to find the balance points of an array</title>
      <link>http://example.org/bytes/array-balance-points/</link>
      <pubDate>Fri, 23 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/array-balance-points/</guid>
      <description>A balance point is where the left side of the index is equal to the right side of the index. This function returns an array of indices of balance points.
function balancePoints(array) { if (!Array.isArray(array)) { return []; } var totalSum = array.reduce(sum, 0); var leftSum = 0; return array.reduce(function(points, current, i) { if (i &amp;gt; 0) { leftSum += array[i-1]; } var rightSum = totalSum - leftSum - current; if (leftSum === rightSum) { points.</description>
    </item>
    
    <item>
      <title>How to find the difference between arrays</title>
      <link>http://example.org/bytes/array-difference/</link>
      <pubDate>Fri, 23 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/array-difference/</guid>
      <description>Returns an array of unique values that is the symmetric difference of the provided arrays.
function arrayDifference(/* arrays */) { var arrays = [].slice.call(arguments); var complement = []; for (var i = 0; i &amp;lt; arrays.length; i++) { var array = arrays[i]; if (Array.isArray(array)) { for (var j = 0; j &amp;lt; array.length; j++) { var value = array[j]; var atIndex = complement.indexOf(value); if (atIndex === -1) { complement.push(value); } else { complement.</description>
    </item>
    
    <item>
      <title>How to sum the digits of a number</title>
      <link>http://example.org/bytes/digit-sum/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/digit-sum/</guid>
      <description>Algorithm to sum the digits of a number.
function digitSum(n) { if (!(typeof n === &#39;number&#39; || n instanceof Number)) { return 0; } if (n &amp;lt;= 0) { return 0; } else if (n &amp;lt; 10) { return n; } else if (n === Infinity) { return Infinity; } return (n % 10) + digitSum((n / 10)&amp;gt;&amp;gt;0); }  Usage:
console.log(digitSum(1234)); // 10 console.log(digitSum(3890)); 20 console.log(digitSum(Infinity)); // Infinity console.log(digitSum(-1234)); // 0 console.</description>
    </item>
    
    <item>
      <title>How to find the maximum value in an array</title>
      <link>http://example.org/bytes/array-max/</link>
      <pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/array-max/</guid>
      <description>Find the maximum value in an array.
function max(col, fn) { var top = -Infinity; var index; if (Array.isArray(col)) { for (var i = 0; i &amp;lt; col.length; i++) { var result = col[i]; if (typeof fn === &#39;function&#39;) { result = fn(col[i]); } else if (typeof fn === &#39;string&#39;) { result = col[i][fn]; } if (result &amp;gt;= top) { top = result; index = i; } } } return typeof index !</description>
    </item>
    
    <item>
      <title>How to find the minimum value in an array</title>
      <link>http://example.org/bytes/array-min/</link>
      <pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/array-min/</guid>
      <description>Find the minimum value in an array.
function min(col, fn) { var bottom = Infinity; var index; if (Array.isArray(col)) { for (var i = 0; i &amp;lt; col.length; i++) { var result = col[i]; if (typeof fn === &#39;function&#39;) { result = fn(col[i]); } else if (typeof fn === &#39;string&#39;) { result = col[i][fn]; } if (result &amp;lt;= bottom) { bottom = result; index = i; } } } return typeof index !</description>
    </item>
    
    <item>
      <title>K-Means Clustering in JavaScript</title>
      <link>http://example.org/blog/k-means-clustering-in-javascript/</link>
      <pubDate>Wed, 25 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/k-means-clustering-in-javascript/</guid>
      <description>Clustering is grouping of data or dividing a large data set into smaller data sets of some similarity. A well known clustering algorithm in unsupervised machine learning is K-Means clustering. The K-Means algorithm takes in n observations (data points), and groups them into k clusters, where each observation belongs to a cluster based on the nearest mean (cluster centroid). The distance between a data point and cluster centroid is calculated using the Euclidean distance.</description>
    </item>
    
    <item>
      <title>Naive Bayes Classifier in JavaScript</title>
      <link>http://example.org/blog/naive-bayes-classifier-in-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/naive-bayes-classifier-in-javascript/</guid>
      <description>The Naive Bayes classifier is a pretty popular text classification algorithm because of it&amp;rsquo;s simplicity. You&amp;rsquo;ll often see this classifier used for spam detection, authorship attribution, gender authentication, determing whether a review is positive or negative, and even sentiment analysis. The Naive Bayes classifier takes in a corpus (body of text) known as a document, which then a stemmer runs through the document and returns a &amp;ldquo;bag or words&amp;rdquo; so to speak.</description>
    </item>
    
  </channel>
</rss>