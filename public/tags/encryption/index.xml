<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Encryption on My New Hugo Site</title>
    <link>http://example.org/tags/encryption/</link>
    <description>Recent content in Encryption on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://example.org/tags/encryption/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generate Self-signed SSL Certificate</title>
      <link>http://example.org/blog/generate-self-signed-ssl-certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/generate-self-signed-ssl-certificate/</guid>
      <description>Using HTTPS for your web application is a no-brainer, but sometimes it is not intuitively clear on how to get started on using SSL for your website. I&amp;rsquo;m going to be going over step-by-step on generating a self-signed certficate and testing it out on a Node.js web server.
Generating Private Key First let&amp;rsquo;s generate a private key. The private key is used to decrypt the data encrypted by the public key.</description>
    </item>
    
    <item>
      <title>How to encrypt with GPG</title>
      <link>http://example.org/bytes/gpg-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/bytes/gpg-encryption/</guid>
      <description>Here are example of how to encrypt, decrypt, and manage PGP keys using GPG.
Generate a new key pair $ gpg --gen-key gpg (GnuPG) 1.4.19; Copyright (C) 2015 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection?</description>
    </item>
    
  </channel>
</rss>