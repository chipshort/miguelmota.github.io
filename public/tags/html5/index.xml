<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html5 on My New Hugo Site</title>
    <link>http://example.org/tags/html5/</link>
    <description>Recent content in Html5 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/html5/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting started with Service Workers</title>
      <link>http://example.org/blog/getting-started-with-service-workers/</link>
      <pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/getting-started-with-service-workers/</guid>
      <description>Service Workers enables the ability to cache files for offline use, serve as a network proxy, enable the ability for push notification, and even background data sync. AppCache was an attempt to solve this problem but it made many assumptions about intended uses and in the end just caused more fustration than anything, so it became deprecated. Service Workers is AppCache&amp;rsquo;s successor, which greatly superceeds it by giving the developer a lot more granular control.</description>
    </item>
    
    <item>
      <title>Screenshots with getUserMedia API</title>
      <link>http://example.org/blog/screenshots-with-getusermedia-api/</link>
      <pubDate>Sat, 31 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/screenshots-with-getusermedia-api/</guid>
      <description>With the getUserMedia API, it is now possible to access the user&amp;rsquo;s webcam and microphone using just JavaScript. What this means is that we can finally get rid of those nasty Flash plugins and use this native approace instead. At the writing of this post, only Firefox 17+ and Chrome 21+ have support for getUserMedia.
Give credit where credit is due. The code is heavily inspired by HTML5 Rocks&amp;rsquo; article Capturing Audio &amp;amp; Video in HTML5.</description>
    </item>
    
    <item>
      <title>Basic HTML5 Audio Manipulation</title>
      <link>http://example.org/blog/basic-html5-audio-manipulation/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/basic-html5-audio-manipulation/</guid>
      <description>Using JavaScript, we can create an audio object and manipulate it very easily. Below is some code (gist) to help you get started. You can play, stop, pause, and loop the audio.
&amp;lt;!-- Audio Control Buttons --&amp;gt; &amp;lt;button id=&amp;quot;play-button&amp;quot;&amp;gt;Play&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;quot;stop-button&amp;quot;&amp;gt;Stop&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;quot;pause-button&amp;quot;&amp;gt;Pause&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;quot;loop-button&amp;quot;&amp;gt;Loop&amp;lt;/button&amp;gt;  // Basic HTML5 audio manipulation (function () { &#39;use strict&#39;; // Set namespace. var NS = {}; // Control buttons. NS.playButton = document.getElementById(&#39;play-button&#39;); NS.stopButton = document.</description>
    </item>
    
    <item>
      <title>HTML5 Reset Stylesheet</title>
      <link>http://example.org/blog/html5-reset-stylesheet/</link>
      <pubDate>Tue, 09 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/html5-reset-stylesheet/</guid>
      <description>I couldn&amp;rsquo;t find an HTML5 reset stylesheet that suited my needs so I decided to modify HTML5 Doctors&amp;rsquo; CSS reset a bit.
Here is the gist:
html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, figcaption, figure, footer, header, hgroup, menu, nav, section, summary, time, mark, audio, video { background: transparent; border: 0; font-size: 100%; margin: 0; outline: 0; padding: 0; vertical-align: baseline; } body { line-height: 1; } article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; } ol, ul { list-style: none; } h1, h2, h3, h4, h5, h6 { font-size: 100%; font-weight: normal; } blockquote, q { quotes: none; } blockquote:before, blockquote:after, q:before, q:after { content: &#39;&#39;; content: none; } :focus { outline: 0; } a { text-decoration: none; } ins { text-decoration: none; } mark { font-style: italic; font-weight: bold; } del { text-decoration: line-through; } abbr[title], dfn[title] { border-bottom: 1px dotted; cursor: help; } table { border-collapse: collapse; border-spacing: 0; } caption, th, td { font-weight: normal; text-align: left; } hr { border: 0; border-top: 1px solid #ccc; display: block; height: 1px; margin: 1em 0; padding: 0; } input, select { vertical-align: middle; }  What CSS reset do you use?</description>
    </item>
    
  </channel>
</rss>