<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mixins on My New Hugo Site</title>
    <link>http://example.org/tags/mixins/</link>
    <description>Recent content in Mixins on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 May 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/mixins/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sass Triangles</title>
      <link>http://example.org/blog/sass-triangles/</link>
      <pubDate>Sat, 04 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/sass-triangles/</guid>
      <description>Creating CSS triangles shouldn&amp;rsquo;t be hard.
Here&amp;rsquo;s a handy little mixin for creating triangles in Sass (gist):
@mixin triangle($size:24px, $color:#000, $direction:up, $trim:false, $transparent:false) { content: &amp;quot;&amp;quot;; display: inline-block; width: 0; height: 0; border: solid $size; @if $direction == up { border-color: transparent transparent $color transparent; @if $transparent { border-color: $color $color transparent $color; } @if $trim { border-top-width: 0; } } @if $direction == right { border-color: transparent transparent transparent $color; @if $transparent { border-color: $color $color $color transparent ; } @if $trim { border-right-width: 0; } } @if $direction == down { border-color: $color transparent transparent transparent; @if $transparent { border-color: transparent $color $color $color; } @if $trim { border-bottom-width: 0; } } @if $direction == left { border-color: transparent $color transparent transparent; @if $transparent { border-color: $color transparent $color $color; } @if $trim { border-left-width: 0; } } }  </description>
    </item>
    
    <item>
      <title>Sass Media Queries</title>
      <link>http://example.org/blog/sass-media-queries/</link>
      <pubDate>Sat, 06 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/sass-media-queries/</guid>
      <description>There are various methods of setting breakpoints in Sass. The first method, which I use, is heavility inspired by Chris Eppstein&amp;rsquo;s selector hacks. The second method is how ZURB&amp;rsquo;s Foundation 4 breakpoints are set.
Here is the gist:
// Sass Media Query Breakpoints // // METHOD 1 // // Inspired by http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32 // // Usage: // // div { // color: blue; // // @include respond-to(mobile) { // color: red; // } // // } // $break-mobile: 640px; $break-desktop: 1024px; @mixin respond-to($media) { @if $media == mobile { @media only screen and (max-width: $break-mobile) { @content; } } @else if $media == tablet { @media only screen and (min-width: $break-mobile + 1) and (max-width: $break-desktop - 1) { @content; } } @else if $media == desktop { @media only screen and (min-width: $break-desktop) { @content; } } } // // METHOD 1 (extended) // // Inspired by https://gist.</description>
    </item>
    
  </channel>
</rss>